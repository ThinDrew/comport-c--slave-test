#include <iostream>
#include <iomanip>
#include <string>
#include <fcntl.h>
#include <termios.h>
#include <unistd.h>
#include <cstring>
#include <vector>

// Таблицы старших и младших байтов для CRC16
const unsigned char CRC16Hi[]  = {
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
} ;

/* CRC16 Table Low byte */
const char CRC16Lo[] = {
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2,
0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04,
0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8,
0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6,
0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10,
0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE,
0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA,
0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C,
0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0,
0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62,
0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE,
0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C,
0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76,
0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54,
0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98,
0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A,
0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86,
0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40
} ;

// Функция вычисления CRC16
uint16_t get_crc16(const std::vector<unsigned char> &data) {
    unsigned char crc_hi = 0xFF; // Старший байт CRC
    unsigned char crc_lo = 0xFF; // Младший байт CRC
    int index;                   // Индекс таблицы

    for (unsigned char byte : data) {
        index = crc_hi ^ byte;
        crc_hi = crc_lo ^ CRC16Hi[index];
        crc_lo = CRC16Lo[index];
    }

    return (crc_hi << 8) | crc_lo;
}

// Функция добавления CRC16 в конец буфера
std::vector<unsigned char> append_crc16_to_array(std::vector<unsigned char> &data) {
    uint16_t crc = get_crc16(data);
    data.push_back(crc >> 8);    // Старший байт
    data.push_back(crc & 0xFF);  // Младший байт
    return data;
}

// Конфигурация последовательного порта
int configure_serial_port(const std::string &port_name, int baud_rate) {
    int serial_port = open(port_name.c_str(), O_RDWR | O_NOCTTY);
    if (serial_port < 0) {
        std::cerr << "Ошибка открытия порта: " << strerror(errno) << std::endl;
        return -1;
    }

    struct termios tty;
    memset(&tty, 0, sizeof tty);

    if (tcgetattr(serial_port, &tty) != 0) {
        std::cerr << "Ошибка чтения параметров порта: " << strerror(errno) << std::endl;
        close(serial_port);
        return -1;
    }

    cfsetospeed(&tty, baud_rate);
    cfsetispeed(&tty, baud_rate);

    tty.c_cflag |= (CLOCAL | CREAD);  // Разрешить прием данных
    tty.c_cflag &= ~PARENB;           // Отключить четность
    tty.c_cflag &= ~CSTOPB;           // Один стоповый бит
    tty.c_cflag &= ~CSIZE;
    tty.c_cflag |= CS8;               // 8 бит на байт

    tty.c_lflag = 0;  // Отключить постобработку

    tty.c_iflag &= ~(IXON | IXOFF | IXANY);  // Отключить управление потоком
    tty.c_oflag &= ~OPOST;

    tty.c_cc[VMIN] = 1;
    tty.c_cc[VTIME] = 1;  // Тайм-аут на чтение

    if (tcsetattr(serial_port, TCSANOW, &tty) != 0) {
        std::cerr << "Ошибка установки параметров порта: " << strerror(errno) << std::endl;
        close(serial_port);
        return -1;
    }

    return serial_port;
}

// Обработка и ответ на запросы Modbus RTU
void modbus_rtu_handler(int serial_port) {
    std::vector<unsigned char> request;
    unsigned char buffer[256];
    int num_bytes;

    std::cout << "Ожидание данных на порту...\n";

    while (true) {
        // Чтение данных из последовательного порта
        num_bytes = read(serial_port, buffer, sizeof(buffer));
        if (num_bytes > 0) {
            request.assign(buffer, buffer + num_bytes);
            std::cout << "Принято: ";
            for (unsigned char byte : request)
                std::cout << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(byte) << " ";
            std::cout << std::endl;

            // Проверка на минимальную длину пакета
            if (request.size() < 4) {
                std::cout << "Недостаточно данных для обработки\n";
                continue;
            }

            // Извлечение ID устройства и кода функции
            unsigned char unit_id = request[0];
            unsigned char function_code = request[1];

            // Проверка CRC16
            if (get_crc16(request) != 0) {
                std::cout << "Неверная контрольная сумма CRC\n";
                continue;
            }

            std::cout << "Modbus запрос: unit_id=" << static_cast<int>(unit_id) << ", function_code=" << static_cast<int>(function_code) << std::endl;

            // Пример обработки запроса с функцией 0x03 (чтение регистров)
            if (function_code == 0x03) {
                uint16_t value = 12345;  // Пример значения регистра
                std::vector<unsigned char> response = {unit_id, function_code, 0x02};  // Длина данных = 2
                response.push_back(value >> 8);  // Старший байт
                response.push_back(value & 0xFF);  // Младший байт

                // Добавление CRC
                append_crc16_to_array(response);

                // Отправка ответа
                write(serial_port, response.data(), response.size());
                std::cout << "Отправлено: ";
                for (unsigned char byte : response)
                    std::cout << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(byte) << " ";
                std::cout << std::endl;
            }
        }
    }
}

int main() {
    std::string port_name = "/dev/ttyS3";
    int serial_port = configure_serial_port(port_name, B115200);
    if (serial_port < 0) {
        return 1;
    }

    modbus_rtu_handler(serial_port);

    close(serial_port);
    return 0;
}
